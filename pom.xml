<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<!-- spring boot 父级依赖 ，必要-->
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.2.5.RELEASE</version>
		<relativePath /> <!-- lookup parent from repository -->
	</parent>
	<!-- 当前项目信息-->
	<groupId>com.www</groupId>
	<artifactId>StudyDemo</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>jar</packaging>
	<name>StudyDemo</name>
	<description>Demo project for Spring Boot</description>

	<properties>
		<java.version>1.8</java.version>
        <maven-jar-plugin.version>3.1.1</maven-jar-plugin.version>
	</properties>
	<!-- 依赖配置 -->
	<dependencies>
		<!-- springboot框架web项目起步依赖 -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<!-- 引入springboot内嵌Tomcat对jsp的解析依赖，必要的 -->
<!--		<dependency>-->
<!--			<groupId>org.apache.tomcat.embed</groupId>-->
<!--			<artifactId>tomcat-embed-core</artifactId>-->
<!--		</dependency>-->
		<!-- springboot thymeleaf页面依赖 -->
<!--		<dependency>-->
<!--			<groupId>org.springframework.boot</groupId>-->
<!--			<artifactId>spring-boot-starter-thymeleaf</artifactId>-->
<!--		</dependency>-->
		<!-- springboot websocket页面依赖 -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-websocket</artifactId>
		</dependency>
		<!-- mybatis整合对springboot的依赖 -->
		<dependency>
			<groupId>org.mybatis.spring.boot</groupId>
			<artifactId>mybatis-spring-boot-starter</artifactId>
			<version>2.0.0</version>
		</dependency>
		<!-- oracle数据库依赖 -->
		<dependency>
			<groupId>com.oracle</groupId>
			<artifactId>ojdbc6</artifactId>
			<version>11.2.0</version>
		</dependency>
		<!-- springboot框架测试起步依赖 -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<!--fastjson 依赖-->
		<dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
            <version>1.2.49</version>
        </dependency>
	</dependencies>

	<build>
		<resources>
		<!-- 使用jsp必须手动指定最后的编译路径，路径是springboot规定好的位置META-INF/resources -->
<!--			<resource>-->
<!--				&lt;!&ndash; 源文件 &ndash;&gt;-->
<!--				<directory>src/main/webapp</directory>-->
<!--				&lt;!&ndash; 指定编译到META-INF/resources &ndash;&gt;-->
<!--				<targetPath>META-INF/resources</targetPath>-->
<!--				&lt;!&ndash; 指定源文件夹中的哪个资源要进行编译 &ndash;&gt;-->
<!--				<includes>-->
<!--					<include>*.*</include>-->
<!--				</includes>-->
<!--			</resource>-->
			<!-- *Mapper.xml文件跟*Mapper.java在src/main/java中同一路径时需要配置  -->
<!--			<resource>-->
<!--				&lt;!&ndash; 源文件 &ndash;&gt;-->
<!--				<directory>src/main/java</directory>-->
<!--				&lt;!&ndash; 指定源文件夹中的哪个资源要进行编译 &ndash;&gt;-->
<!--				<filtering>true</filtering>-->
<!--				<includes>-->
<!--					<include>**/*.xml</include>-->
<!--				</includes>-->
<!--			</resource>-->
		</resources>
		<plugins>
			<!-- mybatis代码自动生成插件 -->
			<plugin>
				<groupId>org.mybatis.generator</groupId>
				<artifactId>mybatis-generator-maven-plugin</artifactId>
				<version>1.3.6</version>
				<configuration>
					<!-- 配置文件 -->
					<configurationFile>GeneratorMapper.xml</configurationFile>
					<verbose>true</verbose>
					<overwrite>true</overwrite>
				</configuration>
			</plugin>
			<!-- springboot项目打包编译插件 -->
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>

</project>
